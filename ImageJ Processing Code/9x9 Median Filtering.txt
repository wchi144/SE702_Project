Dialog.create("9x9 median filtering");

Dialog.addMessage("9x9 median filtering");
Dialog.show();
setBatchMode(true);

print("Starting Median Filter");
//printTime();
median_filter_9();


setBatchMode("exit and display");

print("9x9 Median Filter Completed");
//printTime();

// Produce the 9x9 median image
function median_filter_9() {

	// Question 1
	// Implement 9x9 median filtering

	//Get necessary variables.
	imgid = getImageID();
	width = getWidth();
	height = getHeight();

	//Create new image.
	newImage(getTitle(),bitDepth()+"-bit",width,height,1);
	newimgid = getImageID();

	//Do 9x9 median filtering for each pixel of original image and set the pixel in the new image.
	for(y=0; y<height; y++){
		for(x=0; x<width; x++){
			selectImage(imgid);
			temp = filterpixel(x,y);
			selectImage(newimgid);
			setPixel(x,y,temp);
		}
	}
	selectImage(imgid);
	close();
}

function filterpixel(x, y){

	//Create pixel array for sorting to find median	
	
	pixelarray = newArray(81);
	
	//Sorting Method 3
	//pixelarray = newArray(0);

	//Fill the array, in cases where the pixel is out of bounds the getPixel returns 0 which complies with zero padding.
	count = 0;
	for(j = y-4; j<=y+4; j++){
		for(i = x-4; i<=x+4; i++){
			//Sorting Method 3
			//pixelarray = fmlsorting(pixelarray, getPixel(i,j));
			pixelarray[count] = getPixel(i,j);
			count++;
		}
	}

	//Find and return median
	//I wrote two sorting functions one using merge sort and another one, they both take over 15 mins to complete the image.
	//15mins is not viable for effiecent marking so I just used Array.sort instead.
	
	//Sorting Method 2
	//pixelarray = merge_sort(pixelarray);
	
	pixelarray = Array.sort(pixelarray);
	return(pixelarray[40]);

}

/*


function merge_sort(m){
    
	// if list size is 0 (empty) or 1, consider it sorted and return it
    // (using less than or equal prevents infinite recursion for a zero length m)
	
	if((m.length) <= 1){
		return m;
	}
    
	// else list size is > 1, so split the list into two sublists
	
	middle = round((m.length)/2);

	//left[0] = m[0];
	right = newArray((m.length-middle));
	//right[0] = m[middle];

	left = newArray(middle);

	for(i = 0; i < m.length; i++){
		if(i < middle){
			left[i] = m[i];
		}
		else if(i >= middle){
			right[i-middle] = m[i];
		}
	}

	left = merge_sort(left);
	right = merge_sort(right);
	

	returnvalue = domerge(left,right);

	return returnvalue;
}

function domerge(left, right){
	result = newArray(0);

	while((left.length) > 0 || (right.length) > 0){
		if((left.length) > 0 && (right.length) > 0){
			if(left[0] <= right[0]){
				result = Array.concat(result,left[0]);
				if(left.length == 1){
					left = newArray(0);
				}
				else{
					left = Array.slice(left,1);
				}
			}
			else{
                result = Array.concat(result,right[0]);
				if(right.length == 1){
					right = newArray(0);
				}
                else{
					right = Array.slice(right,1);
				}
			}
		}
        else if(left.length > 0){
			result = Array.concat(result,left[0]);
			if(left.length == 1){
				left = newArray(0);
			}
			else{
				left = Array.slice(left,1);
			}
		}
        else if(right.length > 0){
			result = Array.concat(result,right[0]);
			if(right.length == 1){
				right = newArray(0);
			}
			else{
				right = Array.slice(right,1);
			}
		}
	}
	return result;
}

function printTime(){
     MonthNames = newArray("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
     DayNames = newArray("Sun", "Mon","Tue","Wed","Thu","Fri","Sat");
     getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);
     TimeString ="Date: "+DayNames[dayOfWeek]+" ";
     if (dayOfMonth<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+dayOfMonth+"-"+MonthNames[month]+"-"+year+"\nTime: ";
     if (hour<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+hour+":";
     if (minute<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+minute+":";
     if (second<10) {TimeString = TimeString+"0";}
     TimeString = TimeString+second;
     print(TimeString);
}

function fmlsorting(array, pixel){
	
	length = array.length;

	if(length == 0){
		retArray = Array.concat(array,pixel);
		return retArray;
	}
	
	if(pixel >= array[length-1]){
		retArray = Array.concat(array,pixel);
		return retArray;
	}
	else if(pixel <= array[0]){
		retArray = Array.concat(pixel,array);
		return retArray;
	}
	else{
		indexguess = round(((pixel-array[0])/(array[length-1]-array[0]))*(length-1));
		if(pixel >= array[indexguess]){
			for(i = indexguess; i < length; i++){
				if(pixel <= array[i]){
					retArray = insertP(array, pixel, i);
					return retArray;
				}
			}
			print("1st loop leak"); 
		}
		else if(pixel <= array[indexguess]){
			for(j = indexguess; j >= 0; j--){
				if(pixel >= array[j]){
					retArray = insertP(array, pixel, j);
					return retArray;
				}
			}
			print("2nd loop leak");
		}
	}
	print("something went wrong");
	return array;
}

function insertP(array, pixel, index){
	if(index == 0){
		retArray = Array.concat(pixel,array);
		return retArray;
	}
	left = Array.slice(array, 0, index);
	right = Array.slice(array, index, (array.length));
	temp = Array.concat(left, pixel);
	retArray = Array.concat(temp,right);
	return retArray;
}

*/